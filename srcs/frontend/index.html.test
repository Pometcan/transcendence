<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
            rel="stylesheet"
            integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
            crossorigin="anonymous"
        />
        <title>Three.js with ES Modules</title>
        <script
            src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
            crossorigin="anonymous"
        ></script>

        <link
            rel="icon"
            type="image/png"
            href="./assets/favicon-B1U9ow1M.ico"
        />
        <script type="importmap">
            {
                "imports": {
                    "three": "https://cdn.jsdelivr.net/npm/three@v0.171.0/build/three.module.js",
                    "three/addons/": "https://cdn.jsdelivr.net/npm/three@v0.171.0/examples/jsm/"
                }
            }
        </script>
        <script
            type="module"
            crossorigin
            src="./assets/index-B8Ri6sGP.js"
        ></script>
        <link
            rel="modulepreload"
            crossorigin
            href="./assets/vendor-DcSP8lG2.js"
        />
        <style>
            body {
                font-family: sans-serif;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                height: 100vh;
                margin: 0;
                background-color: rgb(46, 49, 50);
                color: white;
            }
            .button-container {
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
            }
            button {
                padding: 15px 30px;
                font-size: 1.2em;
                cursor: pointer;
                background-color: #121212;
                color: white;
                border: none;
                border-radius: 5px;
            }
            button:hover {
                background-color: #bca220;
            }
            #status {
                margin-top: 20px;
                font-size: 1.5em;
            }
            .hidden {
                display: none;
            }
            input {
                padding: 10px;
                font-size: 1em;
                margin-bottom: 10px;
                width: 200px;
                border-radius: 5px;
                border: 1px solid #ccc;
            }
            .form-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 10px;
            }
        </style>
        <link rel="stylesheet" crossorigin href="./assets/index-CFDdbi_K.css" />
    </head>

    <body>
        <!--ft-transcendence></ft-transcendence-->
        <div id="testing">
            <button
                id="test"
                class="btn btn-outline-danger"
                onclick="postTest()"
            >
                Post at
            </button>
            <button
                id="test2"
                class="btn btn-outline-warning"
                onclick="getTest()"
            >
                get at
            </button>
        </div>
        <div id="status"></div>
           <div id="scores">P1: 0 | P2: 0</div>

           <div class="form-container">
               <input type="text" id="userIdInput" placeholder="Kullanıcı ID'nizi girin">
               <div class="button-container">
                   <button id="hostBtn">Host</button>
                   <button id="joinBtn">Join</button>
               </div>
           </div>

           <div id="gameContainer">
               <canvas id="gameCanvas" width="1280" height="720"></canvas>
           </div>


           <script>
               class PongGame {
                       constructor(canvas) {
                           this.canvas = canvas;
                           this.ctx = canvas.getContext('2d');
                           this.paddleWidth = 30;
                           this.paddleHeight = 100;
                           this.p1_y = 50;
                           this.p2_y = 50;
                           this.ball_x = 50;
                           this.ball_y = 50;
                           this.p1_score = 0;
                           this.p2_score = 0;
                           this.ball_speed = 2;
                           this.draw();
                       }

                       updatePaddles(p1, p2) {
                           if(p1 !== undefined) this.p1_y = p1;
                           if(p2 !== undefined) this.p2_y = p2;
                           this.draw();
                       }

                       updateBall(ball_x, ball_y, p1_score, p2_score, ball_speed) {
                           this.ball_x = ball_x;
                           this.ball_y = ball_y;
                           this.p1_score = p1_score;
                           this.p2_score = p2_score;
                           this.ball_speed = ball_speed;
                           this.updateScoreDisplay();
                           this.draw();
                       }

                       updateScoreDisplay(){
                           document.getElementById('scores').textContent = `P1: ${this.p1_score} | P2: ${this.p2_score}`;
                       }

                       draw() {
                           this.ctx.fillStyle = '#1a1a1a';
                           this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);

                           this.ctx.fillStyle = 'magenta';
                           const p1Y = (this.canvas.height - this.paddleHeight) * (this.p1_y / 100);
                           this.ctx.fillRect(
                               20,
                               p1Y,
                               this.paddleWidth,
                               this.paddleHeight
                           );

                            this.ctx.fillStyle = 'cyan';
                           const p2Y = (this.canvas.height - this.paddleHeight) * (this.p2_y / 100);
                           this.ctx.fillRect(
                               this.canvas.width - 20 - this.paddleWidth,
                               p2Y,
                               this.paddleWidth,
                               this.paddleHeight
                           );

                           this.ctx.beginPath();
                           const ballX = this.canvas.width * (this.ball_x / 100);
                           const ballY = this.canvas.height * (this.ball_y / 100);
                           this.ctx.arc(ballX, ballY, 10, 0, Math.PI * 2);
                           this.ctx.fillStyle = 'white';
                           this.ctx.fill();
                           this.ctx.closePath();
                       }
                   }

                   let game = null;
                   let isHost = false;
                   const hostBtn = document.getElementById('hostBtn');
                   const joinBtn = document.getElementById('joinBtn');
                   const statusDiv = document.getElementById('status');
                   const userIdInput = document.getElementById('userIdInput');
                   const gameContainer = document.getElementById('gameContainer');
                   const scoreDisplay = document.getElementById('scores');

                   let websocket;
                   let roomID;
                   let userID;

                   function connectWebSocket(path) {
                       websocket = new WebSocket('wss://localhost' + path );

                       websocket.onopen = () => {
                           console.log("WebSocket bağlantısı açıldı:", path);
                           gameContainer.style.display = 'block';
                           document.querySelector('.form-container').style.display = 'none';
                           statusDiv.textContent = "Bağlandı - Oda: " + roomID;
                           scoreDisplay.style.display = 'block';

                           const canvas = document.getElementById('gameCanvas');
                           game = new PongGame(canvas);
                           setupKeyListeners();
                           setupScrollListener();
                       };

                       websocket.onmessage = (event) => {
                           const data = JSON.parse(event.data);
                           console.log("Gelen mesaj:", data);

                           if(data.type === 'move') {
                               if(game) {
                                   game.updatePaddles(data.p1_y, data.p2_y);
                               }
                           } else if (data.type === 'update_ball') {
                               if(game) {
                                   game.updateBall(data.ball_x, data.ball_y, data.p1_score, data.p2_score, data.ball_speed);
                               }
                           } else if(data.type === 'disconnect') {
                               gameContainer.style.display = 'none';
                               document.querySelector('.form-container').style.display = 'flex';
                               game = null;
                               websocket.close();
                               statusDiv.textContent = `Oyun sonlandı! Kazanan: ${data.Winner}`;
                               scoreDisplay.style.display = 'none';

                           }
                       };

                       websocket.onerror = (error) => {
                           console.error("WebSocket hatası:", error);
                           gameContainer.style.display = 'none';
                           document.querySelector('.form-container').style.display = 'flex';
                           statusDiv.textContent = "Hata: " + error.message;
                           removeKeyListeners();
                           removeScrollListener();
                           scoreDisplay.style.display = 'none';
                       };

                       websocket.onclose = () => {
                           console.log("WebSocket bağlantısı kapandı.");
                           gameContainer.style.display = 'none';
                           document.querySelector('.form-container').style.display = 'flex';
                            if (!statusDiv.textContent.startsWith("Oyun sonlandı! Kazanan:"))
                            {
                               statusDiv.textContent = "Bağlantı kapandı.";
                            }
                           removeKeyListeners();
                           removeScrollListener();
                           scoreDisplay.style.display = 'none';

                       };
                   }

                   async function sendPostRequest(url, data) {
                       try {
                           const response = await fetch(url, {
                               method: 'POST',
                               headers: {
                                   'Content-Type': 'application/json',
                                   "Content-Type": "application/json",
                                   'X-CSRFToken': getCookie('csrftoken')
                               },
                               body: JSON.stringify(data),
                           });
                           return await response.json();
                       } catch (error) {
                           console.error("POST isteği hatası:", error);
                           return { status: "error", message: "İstek gönderilirken bir hata oluştu." };
                       }
                   }

                   hostBtn.addEventListener('click', async () => {
                       userID = userIdInput.value.trim();
                       if (!userID) {
                           alert("Lütfen bir Kullanıcı ID girin.");
                           return;
                       }

                       const response = await sendPostRequest(`https://${window.location.host}/api/game/host/`, { user_id: userID });

                       if (response.status === "success") {
                           roomID = response.room_id;
                           isHost = true;
                            connectWebSocket('/api/ws/pong/' + roomID + '/' + userID);
                       } else {
                           statusDiv.textContent = "Hata: " + (response.message || "Bilinmeyen hata");
                       }
                   });

                   joinBtn.addEventListener('click', async () => {
                       userID = userIdInput.value.trim();
                       if (!userID) {
                           alert("Lütfen bir Kullanıcı ID girin.");
                           return;
                       }

                       const joinRoomID = prompt("Oda ID'sini girin:");
                       if (!joinRoomID) {
                           alert("Lütfen bir Oda ID girin.");
                           return;
                       }

                       const response = await sendPostRequest(`https://${window.location.host}/api/game/join/`, {
                           user_id: userID,
                           room_id: joinRoomID
                       });

                       if (response.status === "success") {

                           isHost = false;
                           if (response.room_id != null)
                           {
                               roomID =response.room_id;
                           }
                           connectWebSocket('/api/ws/pong/' + roomID + '/' + userID);

                       } else {
                           statusDiv.textContent = "Hata: " + (response.message || "Bilinmeyen hata");
                       }
                   });

                   function setupKeyListeners() {
                       document.addEventListener('keydown', handleKeyPress);
                   }

                   function removeKeyListeners() {
                       document.removeEventListener('keydown', handleKeyPress);
                   }

                   function setupScrollListener() {
                       document.addEventListener('wheel', handleScroll);
                   }

                   function removeScrollListener() {
                       document.removeEventListener('wheel', handleScroll);
                   }

                   function handleKeyPress(event) {
                       if (websocket?.readyState === WebSocket.OPEN) {
                           let direction;
                           if (event.key === 'ArrowUp' || event.key.toLowerCase() === 'w') {
                               direction = 'up';
                           } else if (event.key === 'ArrowDown' || event.key.toLowerCase() === 's') {
                               direction = 'down';
                           }

                           if (direction) {
                               for (let i = 0; i < 10; i++) {
                                    websocket.send(JSON.stringify({
                                        type: 'move',
                                        direction: direction,
                                    }));
                                }
                           }
                       }
                   }
                      function handleScroll(event) {
                       if (websocket?.readyState === WebSocket.OPEN) {
                           let direction;
                           if (event.deltaY < 0) {
                               direction = 'up';
                           } else if (event.deltaY > 0) {
                               direction = 'down';
                           }

                           if (direction) {
                              for (let i = 0; i < 10; i++) {
                                   websocket.send(JSON.stringify({
                                        type: 'move',
                                        direction: direction,
                                   }));
                               }
                           }
                       }
                   }

        function postTest() {
            fetch(`https://${window.location.host}/api/rest-auth/login/`, {
                method: "POST",
                credentials: "include", // Tarayıcıdan çerez (cookie) göndermesi için gerekli!
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json",
                    'X-CSRFToken': getCookie('csrftoken')
                },
                body: JSON.stringify({
                    username: "pomet",
                    email: "po@po.com",
                    password: "123",

                }),
            })
                .then((response) => response.json())
                .then((data) => console.log(data))
                .catch((error) => console.error("Error:", error));
        }

        function getTest() {
            fetch(`https://${window.location.host}/api/users/csrf/`, {
                method: "GET",
                credentials: "include", // Çerezleri backend'e göndermek için gerekli
                headers: {
                    Accept: "application/json",
                },
            })
                .then((response) => response.json())
                .then((data) => {
                  console.log(data)
                  setCookie('csrftoken', data.csrfToken, 1);
                })
                .catch((error) => console.error("Error:", error));
        }

        function setCookie(name,value,days) {
            var expires = "";
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days*24*60*60*1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "")  + expires + "; path=/";
        }
        function getCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for(var i=0;i < ca.length;i++) {
                var c = ca[i];
                while (c.charAt(0)==' ') c = c.substring(1,c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
            }
            return null;
        }
        function eraseCookie(name) {
            document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
        }

    </script>
</html>
